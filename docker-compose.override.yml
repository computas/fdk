version: "3"

services:
  search:
    build: ./applications/search
    restart: always
    command: npm start
    ports:
       - "3000:3000"
    volumes:
      - ./applications/search/src:/usr/src/app/src:rw
    environment:
      - REDUX_LOG=${REDUX_LOG}
      - NODE_ENV=${NODE_ENV}

  api-cat:
    restart: always
    ports:
      - "8087:8080"
      - "9087:8181"
    environment:
      - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
      - FDK_ES_CLUSTERNODES=elasticsearch5:9300
      - FDK_ES_CLUSTERNAME=elasticsearch

  search-api:
    restart: always
    ports:
      - "8083:8080"
      - "9083:8181"
    environment:
     - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
     - FDK_ES_CLUSTERNODES=elasticsearch5:9300
     - FDK_ES_CLUSTERNAME=elasticsearch

  nginx-search:
    restart: always
    ports:
      - "8080:8080"

  fuseki:
    restart: always
    volumes:
      - ./data/fuseki:/etc/fuseki/databases/
    ports:
     - "3030:8080"

  harvester-api:
    restart: always
    ports:
     - "8081:8080"
     - "9081:8181"
    environment:
     - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx1024M -Dspring.profiles.active=docker
     - FDK_ES_CLUSTERNODES=elasticsearch5:9300
     - FDK_ES_CLUSTERNAME=elasticsearch
     - fuseki.dcatServiceUri=http://fuseki:8080/fuseki/dcat
     - fuseki.adminServiceUri=http://fuseki:8080/fuseki/admin
     - application.crawlerThreadPoolSize=2
    volumes:
     - ./logs:/usr/local/tomcat/logs:rw

  harvester:
    restart: always
    ports:
     - "8082:8080"
    environment:
     - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
     - fuseki.dcatServiceUri=http://fuseki:8080/fuseki/dcat
     - fuseki.adminServiceUri=http://fuseki:8080/fuseki/admin
     - application.harvesterUrl=http://harvester-api:8080
     - harvester_adminUsername=test_admin
     - harvester_adminPassword=password
    volumes:
     - ./logs:/usr/local/tomcat/logs:rw

  elasticsearch5:
    restart: always
    ports:
    - "9200:9200"
    - "9300:9300"
    volumes:
    - ./data/esdata5:/usr/share/elasticsearch/data
    environment:
    - cluster.name=elasticsearch
    - xpack.security.enabled=false

  nginx-registration:
    restart: always

  nginx-registration-ssl:
    image: dcatno/nginx-registration-ssl:latest
    restart: always
    ports:
      - "8098:443"
    depends_on:
      - nginx-registration
      - registration-react

  registration-api:
    restart: always
    ports:
      - "8079:8080"
    environment:
     - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker
     - FDK_ES_CLUSTERNODES=elasticsearch5:9300
     - FDK_ES_CLUSTERNAME=elasticsearch
     - registrationAPI_clusterName=elasticsearch
     - registrationApi_altinnServiceUrl=http://registration-auth:8080/
     - registrationApi_apikey=${registrationApi_apikey}
     - registrationApi_clientSSLCertificateKeystoreLocation=conf/dummy-client-SSL-cert.p12
     - registrationApi_clientSSLCertificateKeystorePassword=password
     - registrationApi_harvesterUsername=test_admin
     - registrationApi_harvesterPassword=password
     - registrationApi_ipKeyPassword=${registrationApi_ipKeyPassword}
     - registrationApi_ipStorePassword=${registrationApi_ipStorePassword}

  registration-react:
    build: ./applications/registration-react
    restart: always
    command: npm start
    ports:
     - "4300:4300"
    volumes:
     - ./applications/registration-react/src:/usr/src/app/src:rw
    environment:
     - REGISTRATION_LANGUAGE=${REGISTRATION_LANGUAGE}
     - NODE_ENV=${NODE_ENV}

  registration-auth:
      restart: always
      ports:
        - "8077:8080"
      environment:
        - JAVA_OPTS= -ea -Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker

  reference-data:
    restart: always
    ports:
      - "8100:8080"
    environment:
     - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Xmx256M -Dspring.profiles.active=docker

  e2e:
    build: ./applications/e2e
    volumes:
      -   ./applications/e2e/test:/usr/src/app/test:rw
