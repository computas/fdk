// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render ResultsApi correctly with hits 1`] = `
<main
  id="content"
>
  <div
    className="row mb-3"
  >
    <div
      className="col-12 d-flex justify-content-between"
    >
      <button
        className="btn btn-primary fdk-button fade-in-500 d-none"
        onClick={[MockFunction]}
        type="button"
      >
        Clear
      </button>
      <Select
        activeSort={null}
        items={
          Array [
            Object {
              "defaultOption": true,
              "field": "_score",
              "label": "relevance",
              "order": "asc",
            },
            Object {
              "field": "title",
              "label": "title",
              "order": "asc",
            },
            Object {
              "field": "modified",
              "label": "modified",
              "order": "desc",
            },
            Object {
              "field": "publisher.name",
              "label": "publisher",
              "order": "asc",
            },
          ]
        }
        onChange={[MockFunction]}
      />
    </div>
  </div>
  <div
    className="row"
  >
    <aside
      className="search-filters col-lg-4 d-none d-lg-block"
    >
      <span
        aria-hidden="false"
        className="uu-invisible"
      >
        Filtrering
      </span>
      <div>
        <Modal
          autoFocus={true}
          backdrop={true}
          backdropTransition={
            Object {
              "mountOnEnter": true,
              "timeout": 150,
            }
          }
          centered={false}
          fade={true}
          isOpen={true}
          keyboard={true}
          modalTransition={
            Object {
              "timeout": 300,
            }
          }
          onClosed={[Function]}
          onOpened={[Function]}
          role="dialog"
          toggle={[MockFunction]}
          zIndex={1050}
        >
          <ModalHeader
            closeAriaLabel="Close"
            tag="h5"
            toggle={[MockFunction]}
            wrapTag="div"
          >
            Filter
          </ModalHeader>
          <ModalBody
            tag="div"
          >
            <div
              className="search-filters"
            >
              <FilterBox
                activeFilter={null}
                filter={
                  Object {
                    "buckets": Array [
                      Object {
                        "count": 3,
                        "key": "MISSING",
                      },
                      Object {
                        "count": 1,
                        "key": "NON_PUBLIC",
                      },
                      Object {
                        "count": 1,
                        "key": "RESTRICTED",
                      },
                    ],
                  }
                }
                htmlKey={2}
                onClick={[MockFunction]}
                themesItems={null}
                title="Access"
              />
            </div>
          </ModalBody>
          <ModalFooter
            tag="div"
          >
            <Button
              className="fdk-button"
              color="primary"
              onClick={[MockFunction]}
              tag="button"
            >
              Close
            </Button>
          </ModalFooter>
        </Modal>
        <FilterBox
          activeFilter={null}
          filter={
            Object {
              "buckets": Array [
                Object {
                  "count": 3,
                  "key": "MISSING",
                },
                Object {
                  "count": 1,
                  "key": "NON_PUBLIC",
                },
                Object {
                  "count": 1,
                  "key": "RESTRICTED",
                },
              ],
            }
          }
          htmlKey={1}
          onClick={[MockFunction]}
          themesItems={null}
          title="Access"
        />
        <SearchPublishersTree
          activeFilter={null}
          filter={Array []}
          onFilterPublisherHierarchy={[MockFunction]}
          onSearch={null}
          orgPath={null}
          publishers={Object {}}
          title="Provider"
        />
        <FilterBox
          activeFilter={null}
          filter={
            Object {
              "buckets": Array [
                Object {
                  "count": 2,
                  "key": "application/json",
                },
                Object {
                  "count": 2,
                  "key": "application/json;charset=UTF-8",
                },
                Object {
                  "count": 1,
                  "key": "*/*",
                },
                Object {
                  "count": 1,
                  "key": "application/jose",
                },
                Object {
                  "count": 1,
                  "key": "application/ld+json",
                },
                Object {
                  "count": 1,
                  "key": "application/rdf+xml",
                },
                Object {
                  "count": 1,
                  "key": "text/turtle",
                },
              ],
            }
          }
          htmlKey={2}
          onClick={null}
          themesItems={null}
          title="Format"
        />
      </div>
    </aside>
    <div
      className="col-12 col-lg-8"
      id="apis"
    >
      <SearchHitItem
        fadeInCounter={0}
        item={
          Object {
            "apiSpec": "{
  \\"swagger\\": \\"2.0\\",
  \\"info\\": {
    \\"description\\": \\"Modellkatalogtjeneste for SERES - domeneklient\\",
    \\"version\\": \\"1.0\\",
    \\"title\\": \\"SERES3 REPOSITORY\\",
    \\"termsOfService\\": \\"Terms of service\\",
    \\"contact\\": {
      \\"name\\": \\"SERES brukerstÃ¸tte\\",
      \\"url\\": \\"http://www.brreg.no/\\",
      \\"email\\": \\"seres@brreg.no\\"
    },
    \\"license\\": {
      \\"name\\": \\"License of API\\",
      \\"url\\": \\"API license URL\\"
    }
  },
  \\"host\\": \\"repository-test-seres-ut1.paas-nprd.brreg.no\\",
  \\"basePath\\": \\"/\\",
  \\"tags\\": [{
    \\"name\\": \\"catalog-controller\\",
    \\"description\\": \\"Catalog Controller\\"
  }, {
    \\"name\\": \\"change-controller\\",
    \\"description\\": \\"Change Controller\\"
  }, {
    \\"name\\": \\"domain-controller\\",
    \\"description\\": \\"Domain Controller\\"
  }, {
    \\"name\\": \\"model-controller\\",
    \\"description\\": \\"Model Controller\\"
  }, {
    \\"name\\": \\"version-controller\\",
    \\"description\\": \\"Version Controller\\"
  }
  ],
  \\"paths\\": {
    \\"/seres/v1/repository/catalogs\\": {
      \\"get\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"list all catalogs\\",
        \\"description\\": \\"Returns a list of all catalogs stored by the repository (currently restriced to 1000 catalogs)\\",
        \\"operationId\\": \\"listCatalogUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"create a catalog\\",
        \\"description\\": \\"Returns the created catalog\\",
        \\"operationId\\": \\"createCatalogUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"unique identifier of the catalog, usually a 9-digit (orgnumber)\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"the title of the catalog\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}\\": {
      \\"get\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"get a specific catalog\\",
        \\"description\\": \\"Returns the catalog\\",
        \\"operationId\\": \\"getCatalogUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"update the catalog\\",
        \\"description\\": \\"returns the updated catalog\\",
        \\"operationId\\": \\"updateCatalogUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the catalog's unique identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedCatalog\\",
          \\"description\\": \\"the catalog with updated values\\",
          \\"required\\": false,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Catalog\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/domains\\": {
      \\"get\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"list domains\\",
        \\"description\\": \\"Returns a list of all domains under a specific catalog\\",
        \\"operationId\\": \\"listDomainsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/Domain\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"create a domain\\",
        \\"description\\": \\"Returns the created domain\\",
        \\"operationId\\": \\"createDomainUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"the title of the domain\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicauth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}\\": {
      \\"get\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"get a domain\\",
        \\"description\\": \\"Returns the domain object requested\\",
        \\"operationId\\": \\"getDomainUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"update a domain\\",
        \\"description\\": \\"Updates the domain object\\",
        \\"operationId\\": \\"updateDomainUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier (base36)\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedDomain\\",
          \\"description\\": \\"the updated domain object\\",
          \\"required\\": false,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Domain\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicauth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/models\\": {
      \\"get\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"list models\\",
        \\"description\\": \\"Returns a the list of model objects in a domain\\",
        \\"operationId\\": \\"listModelsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/Model\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"create a model\\",
        \\"description\\": \\"Returns the created model object\\",
        \\"operationId\\": \\"createModelUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"title\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"type\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"type\\",
          \\"required\\": false,
          \\"type\\": \\"string\\",
          \\"default\\": \\"tjenestemodell\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}\\": {
      \\"get\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"get a model\\",
        \\"description\\": \\"Returns a model object\\",
        \\"operationId\\": \\"getModelUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"update a model\\",
        \\"description\\": \\"Updated the values of the model object\\",
        \\"operationId\\": \\"updateModelUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedModel\\",
          \\"description\\": \\"updatedModel\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Model\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/versions\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"list versions\\",
        \\"description\\": \\"Returns a list of version objects\\",
        \\"operationId\\": \\"listVersionsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/ModelVersion\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"create a version\\",
        \\"description\\": \\"Create the model version from scratch\\",
        \\"operationId\\": \\"createVersionUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"title\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"data\\",
          \\"description\\": \\"data\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/ModelData\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"get a version object\\",
        \\"description\\": \\"get a specific version object\\",
        \\"operationId\\": \\"getVersionUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"update a version\\",
        \\"description\\": \\"creates a new version object by copying it from another version\\",
        \\"operationId\\": \\"updateVersionUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedVersion\\",
          \\"description\\": \\"updatedVersion\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/ModelVersion\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      },
      \\"delete\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"delete a version\\",
        \\"description\\": \\"deletes the refered version\\",
        \\"operationId\\": \\"deleteVersionUsingDELETE\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"boolean\\"
            }
          },
          \\"204\\": {
            \\"description\\": \\"No Content\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/approve\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'publisert'\\",
        \\"description\\": \\"changes the version state attribute to approved\\",
        \\"operationId\\": \\"setStateToApproveUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/copy\\": {
      \\"post\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"create a version by copy\\",
        \\"description\\": \\"creates a new version object by copying it from another version\\",
        \\"operationId\\": \\"copyVersionUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the identifier of the model of which to store the new version in, must be within the domain and catalog\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the identifier of the source version to copy from\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/data\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"getModel\\",
        \\"operationId\\": \\"getModelUsingGET_1\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/history\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'historisk'\\",
        \\"description\\": \\"changes the version state attribute to historic\\",
        \\"operationId\\": \\"setStateToHistoryUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/reject\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'forkastet'\\",
        \\"description\\": \\"changes the version state attribute to rejected\\",
        \\"operationId\\": \\"setStateToRejectedUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/versions/{versionReference}/changelog\\": {
      \\"get\\": {
        \\"tags\\": [\\"change-controller\\"],
        \\"summary\\": \\"version changelog\\",
        \\"description\\": \\"Returns the change events that has occured to a specific model-version. Pagination is required: ?page=0&size=20\\",
        \\"operationId\\": \\"listChangeEventsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"versionReference\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the version reference catalogId_domainId_modelId_versionId_versionNumber\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/VersionChangeEvent\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    }
  },
  \\"definitions\\": {
    \\"Catalog\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"Catalog\\"
    },
    \\"Domain\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"state\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"Domain\\"
    },
    \\"Model\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"domainId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"state\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"type\\": {
          \\"type\\": \\"string\\"
        },
        \\"useFrom\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"useTo\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        }
      },
      \\"title\\": \\"Model\\"
    },
    \\"ModelData\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"manifest\\": {
          \\"type\\": \\"string\\"
        },
        \\"value\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"byte\\"
        }
      },
      \\"title\\": \\"ModelData\\"
    },
    \\"ModelImport\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"models\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"ModelImport\\"
    },
    \\"ModelVersion\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"data\\": {
          \\"$ref\\": \\"#/definitions/ModelData\\"
        },
        \\"domainId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"imports\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/ModelImport\\"
          }
        },
        \\"lastChanged\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"modelId\\": {
          \\"type\\": \\"string\\"
        },
        \\"sourceVersion\\": {
          \\"type\\": \\"string\\"
        },
        \\"status\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"useFrom\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"useTo\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"user\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionInfo\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionNumber\\": {
          \\"type\\": \\"integer\\",
          \\"format\\": \\"int32\\"
        }
      },
      \\"title\\": \\"ModelVersion\\"
    },
    \\"VersionChangeEvent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"operation\\": {
          \\"type\\": \\"string\\"
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"userId\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionState\\": {
          \\"$ref\\": \\"#/definitions/ModelVersion\\"
        }
      },
      \\"title\\": \\"VersionChangeEvent\\"
    },
    \\"VersionChangeRecord\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"operation\\": {
          \\"type\\": \\"string\\"
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"userId\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionState\\": {
          \\"$ref\\": \\"#/definitions/ModelVersion\\"
        }
      },
      \\"title\\": \\"VersionChangeRecord\\"
    }
  }
}
",
            "apiSpecUrl": "jar:file:/app.jar!/BOOT-INF/classes!/seres-api.json",
            "contactPoint": Array [
              Object {
                "email": "seres@brreg.no",
                "organizationName": "SERES brukerstÃ¸tte",
                "uri": "http://www.brreg.no/",
              },
            ],
            "description": Object {
              "no": "Modellkatalogtjeneste for SERES - domeneklient",
            },
            "formats": Array [
              "application/json;charset=UTF-8",
            ],
            "id": "7d13645a-0d64-4af9-8a19-3a602713115a",
            "openApi": Object {
              "components": Object {
                "schemas": Object {
                  "Catalog": Object {
                    "properties": Object {
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "Catalog",
                    "type": "object",
                  },
                  "Domain": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "state": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "Domain",
                    "type": "object",
                  },
                  "Model": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "domainId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "state": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "type": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "useFrom": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "useTo": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                    },
                    "title": "Model",
                    "type": "object",
                  },
                  "ModelData": Object {
                    "properties": Object {
                      "manifest": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "value": Object {
                        "extensions": Object {},
                        "format": "byte",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                      },
                    },
                    "title": "ModelData",
                    "type": "object",
                  },
                  "ModelImport": Object {
                    "properties": Object {
                      "models": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "ModelImport",
                    "type": "object",
                  },
                  "ModelVersion": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "data": Object {
                        "$ref": "#/components/schemas/ModelData",
                        "extensions": Object {},
                      },
                      "domainId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "imports": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                      "lastChanged": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "modelId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "sourceVersion": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "status": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "useFrom": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "useTo": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "user": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionInfo": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionNumber": Object {
                        "extensions": Object {},
                        "format": "int32",
                        "type": "integer",
                      },
                    },
                    "title": "ModelVersion",
                    "type": "object",
                  },
                  "VersionChangeEvent": Object {
                    "properties": Object {
                      "operation": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "userId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionState": Object {
                        "$ref": "#/components/schemas/ModelVersion",
                        "extensions": Object {},
                      },
                    },
                    "title": "VersionChangeEvent",
                    "type": "object",
                  },
                  "VersionChangeRecord": Object {
                    "properties": Object {
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "operation": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "userId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionState": Object {
                        "$ref": "#/components/schemas/ModelVersion",
                        "extensions": Object {},
                      },
                    },
                    "title": "VersionChangeRecord",
                    "type": "object",
                  },
                },
              },
              "info": Object {
                "contact": Object {
                  "email": "seres@brreg.no",
                  "name": "SERES brukerstÃ¸tte",
                  "url": "http://www.brreg.no/",
                },
                "description": "Modellkatalogtjeneste for SERES - domeneklient",
                "extensions": Object {},
                "license": Object {
                  "extensions": Object {},
                  "name": "License of API",
                  "url": "API license URL",
                },
                "termsOfService": "Terms of service",
                "title": "SERES3 REPOSITORY",
                "version": "1.0",
              },
              "openapi": "3.0.1",
              "paths": Object {
                "/seres/v1/repository/catalogs": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of all catalogs stored by the repository (currently restriced to 1000 catalogs)",
                    "extensions": Object {},
                    "operationId": "listCatalogUsingGET",
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list all catalogs",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created catalog",
                    "extensions": Object {},
                    "operationId": "createCatalogUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "unique identifier of the catalog, usually a 9-digit (orgnumber)",
                        "extensions": Object {},
                        "in": "query",
                        "name": "catalog",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the title of the catalog",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "create a catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the catalog",
                    "extensions": Object {},
                    "operationId": "getCatalogUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "the catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a specific catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                  "put": Object {
                    "description": "returns the updated catalog",
                    "extensions": Object {},
                    "operationId": "updateCatalogUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "the catalog's unique identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Catalog",
                          },
                        },
                      },
                      "description": "the catalog with updated values",
                      "required": false,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "update the catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/domains": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of all domains under a specific catalog",
                    "extensions": Object {},
                    "operationId": "listDomainsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list domains",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created domain",
                    "extensions": Object {},
                    "operationId": "createDomainUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the title of the domain",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicauth": Array [],
                      },
                    ],
                    "summary": "create a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the domain object requested",
                    "extensions": Object {},
                    "operationId": "getDomainUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                  "put": Object {
                    "description": "Updates the domain object",
                    "extensions": Object {},
                    "operationId": "updateDomainUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier (base36)",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Domain",
                          },
                        },
                      },
                      "description": "the updated domain object",
                      "required": false,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicauth": Array [],
                      },
                    ],
                    "summary": "update a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/models": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a the list of model objects in a domain",
                    "extensions": Object {},
                    "operationId": "listModelsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list models",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created model object",
                    "extensions": Object {},
                    "operationId": "createModelUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "title",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "type",
                        "extensions": Object {},
                        "in": "query",
                        "name": "type",
                        "schema": Object {
                          "default": "tjenestemodell",
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a model object",
                    "extensions": Object {},
                    "operationId": "getModelUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                  "put": Object {
                    "description": "Updated the values of the model object",
                    "extensions": Object {},
                    "operationId": "updateModelUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Model",
                          },
                        },
                      },
                      "description": "updatedModel",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "update a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/versions": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of version objects",
                    "extensions": Object {},
                    "operationId": "listVersionsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list versions",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Create the model version from scratch",
                    "extensions": Object {},
                    "operationId": "createVersionUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "title",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/ModelData",
                          },
                        },
                      },
                      "description": "data",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}": Object {
                  "delete": Object {
                    "description": "deletes the refered version",
                    "extensions": Object {},
                    "operationId": "deleteVersionUsingDELETE",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "boolean",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "204": Object {
                        "content": Object {},
                        "description": "No Content",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "delete a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "extensions": Object {},
                  "get": Object {
                    "description": "get a specific version object",
                    "extensions": Object {},
                    "operationId": "getVersionUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a version object",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "put": Object {
                    "description": "creates a new version object by copying it from another version",
                    "extensions": Object {},
                    "operationId": "updateVersionUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/ModelVersion",
                          },
                        },
                      },
                      "description": "updatedVersion",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "update a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/approve": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to approved",
                    "extensions": Object {},
                    "operationId": "setStateToApproveUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'publisert'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/copy": Object {
                  "extensions": Object {},
                  "post": Object {
                    "description": "creates a new version object by copying it from another version",
                    "extensions": Object {},
                    "operationId": "copyVersionUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the identifier of the model of which to store the new version in, must be within the domain and catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the identifier of the source version to copy from",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a version by copy",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/data": Object {
                  "extensions": Object {},
                  "get": Object {
                    "extensions": Object {},
                    "operationId": "getModelUsingGET_1",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "getModel",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/history": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to historic",
                    "extensions": Object {},
                    "operationId": "setStateToHistoryUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'historisk'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/reject": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to rejected",
                    "extensions": Object {},
                    "operationId": "setStateToRejectedUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'forkastet'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/versions/{versionReference}/changelog": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the change events that has occured to a specific model-version. Pagination is required: ?page=0&size=20",
                    "extensions": Object {},
                    "operationId": "listChangeEventsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "the version reference catalogId_domainId_modelId_versionId_versionNumber",
                        "extensions": Object {},
                        "in": "path",
                        "name": "versionReference",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/VersionChangeEvent",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "version changelog",
                    "tags": Array [
                      "change-controller",
                    ],
                  },
                },
              },
              "servers": Array [
                Object {
                  "url": "//repository-test-seres-ut1.paas-nprd.brreg.no/",
                },
              ],
              "tags": Array [
                Object {
                  "description": "Catalog Controller",
                  "extensions": Object {},
                  "name": "catalog-controller",
                },
                Object {
                  "description": "Change Controller",
                  "extensions": Object {},
                  "name": "change-controller",
                },
                Object {
                  "description": "Domain Controller",
                  "extensions": Object {},
                  "name": "domain-controller",
                },
                Object {
                  "description": "Model Controller",
                  "extensions": Object {},
                  "name": "model-controller",
                },
                Object {
                  "description": "Version Controller",
                  "extensions": Object {},
                  "name": "version-controller",
                },
              ],
            },
            "provenance": Object {
              "prefLabel": Object {
                "en": "Provinens",
                "no": "Opphav",
              },
              "uri": "http://data.brreg.no/datakatalog/provinens",
            },
            "publisher": Object {
              "id": "974760673",
              "name": "REGISTERENHETEN I BRÃNNÃYSUND",
              "orgPath": "/STAT/912660680/974760673",
              "prefLabel": Object {
                "no": "BrÃ¸nnÃ¸ysundregistrene",
              },
              "uri": "http://data.brreg.no/enhetsregisteret/enhet/974760673",
            },
            "title": Object {
              "no": "SERES3 REPOSITORY",
            },
          }
        }
        key="7d13645a-0d64-4af9-8a19-3a602713115a"
        publishers={Object {}}
      />
      <SearchHitItem
        fadeInCounter={1}
        item={
          Object {
            "apiSpec": "{
  \\"swagger\\": \\"2.0\\",
  \\"info\\": {
    \\"description\\": \\"Modellkatalogtjeneste for SERES - domeneklient\\",
    \\"version\\": \\"1.0\\",
    \\"title\\": \\"SERES3 REPOSITORY\\",
    \\"termsOfService\\": \\"Terms of service\\",
    \\"contact\\": {
      \\"name\\": \\"SERES brukerstÃ¸tte\\",
      \\"url\\": \\"http://www.brreg.no/\\",
      \\"email\\": \\"seres@brreg.no\\"
    },
    \\"license\\": {
      \\"name\\": \\"License of API\\",
      \\"url\\": \\"API license URL\\"
    }
  },
  \\"host\\": \\"repository-test-seres-ut1.paas-nprd.brreg.no\\",
  \\"basePath\\": \\"/\\",
  \\"tags\\": [{
    \\"name\\": \\"catalog-controller\\",
    \\"description\\": \\"Catalog Controller\\"
  }, {
    \\"name\\": \\"change-controller\\",
    \\"description\\": \\"Change Controller\\"
  }, {
    \\"name\\": \\"domain-controller\\",
    \\"description\\": \\"Domain Controller\\"
  }, {
    \\"name\\": \\"model-controller\\",
    \\"description\\": \\"Model Controller\\"
  }, {
    \\"name\\": \\"version-controller\\",
    \\"description\\": \\"Version Controller\\"
  }
  ],
  \\"paths\\": {
    \\"/seres/v1/repository/catalogs\\": {
      \\"get\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"list all catalogs\\",
        \\"description\\": \\"Returns a list of all catalogs stored by the repository (currently restriced to 1000 catalogs)\\",
        \\"operationId\\": \\"listCatalogUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"create a catalog\\",
        \\"description\\": \\"Returns the created catalog\\",
        \\"operationId\\": \\"createCatalogUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"unique identifier of the catalog, usually a 9-digit (orgnumber)\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"the title of the catalog\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}\\": {
      \\"get\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"get a specific catalog\\",
        \\"description\\": \\"Returns the catalog\\",
        \\"operationId\\": \\"getCatalogUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"catalog-controller\\"],
        \\"summary\\": \\"update the catalog\\",
        \\"description\\": \\"returns the updated catalog\\",
        \\"operationId\\": \\"updateCatalogUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the catalog's unique identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedCatalog\\",
          \\"description\\": \\"the catalog with updated values\\",
          \\"required\\": false,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Catalog\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Catalog\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/domains\\": {
      \\"get\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"list domains\\",
        \\"description\\": \\"Returns a list of all domains under a specific catalog\\",
        \\"operationId\\": \\"listDomainsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/Domain\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"create a domain\\",
        \\"description\\": \\"Returns the created domain\\",
        \\"operationId\\": \\"createDomainUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"the title of the domain\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicauth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}\\": {
      \\"get\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"get a domain\\",
        \\"description\\": \\"Returns the domain object requested\\",
        \\"operationId\\": \\"getDomainUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"domain-controller\\"],
        \\"summary\\": \\"update a domain\\",
        \\"description\\": \\"Updates the domain object\\",
        \\"operationId\\": \\"updateDomainUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier (base36)\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedDomain\\",
          \\"description\\": \\"the updated domain object\\",
          \\"required\\": false,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Domain\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Domain\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicauth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/models\\": {
      \\"get\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"list models\\",
        \\"description\\": \\"Returns a the list of model objects in a domain\\",
        \\"operationId\\": \\"listModelsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/Model\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"create a model\\",
        \\"description\\": \\"Returns the created model object\\",
        \\"operationId\\": \\"createModelUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"title\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"type\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"type\\",
          \\"required\\": false,
          \\"type\\": \\"string\\",
          \\"default\\": \\"tjenestemodell\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}\\": {
      \\"get\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"get a model\\",
        \\"description\\": \\"Returns a model object\\",
        \\"operationId\\": \\"getModelUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"model-controller\\"],
        \\"summary\\": \\"update a model\\",
        \\"description\\": \\"Updated the values of the model object\\",
        \\"operationId\\": \\"updateModelUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedModel\\",
          \\"description\\": \\"updatedModel\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/Model\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/Model\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/versions\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"list versions\\",
        \\"description\\": \\"Returns a list of version objects\\",
        \\"operationId\\": \\"listVersionsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"array\\",
              \\"items\\": {
                \\"$ref\\": \\"#/definitions/ModelVersion\\"
              }
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"post\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"create a version\\",
        \\"description\\": \\"Create the model version from scratch\\",
        \\"operationId\\": \\"createVersionUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"title\\",
          \\"in\\": \\"query\\",
          \\"description\\": \\"title\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"data\\",
          \\"description\\": \\"data\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/ModelData\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"get a version object\\",
        \\"description\\": \\"get a specific version object\\",
        \\"operationId\\": \\"getVersionUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      },
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"update a version\\",
        \\"description\\": \\"creates a new version object by copying it from another version\\",
        \\"operationId\\": \\"updateVersionUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"in\\": \\"body\\",
          \\"name\\": \\"updatedVersion\\",
          \\"description\\": \\"updatedVersion\\",
          \\"required\\": true,
          \\"schema\\": {
            \\"$ref\\": \\"#/definitions/ModelVersion\\"
          }
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      },
      \\"delete\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"delete a version\\",
        \\"description\\": \\"deletes the refered version\\",
        \\"operationId\\": \\"deleteVersionUsingDELETE\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"type\\": \\"boolean\\"
            }
          },
          \\"204\\": {
            \\"description\\": \\"No Content\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/approve\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'publisert'\\",
        \\"description\\": \\"changes the version state attribute to approved\\",
        \\"operationId\\": \\"setStateToApproveUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/copy\\": {
      \\"post\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"create a version by copy\\",
        \\"description\\": \\"creates a new version object by copying it from another version\\",
        \\"operationId\\": \\"copyVersionUsingPOST\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain identifier\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the identifier of the model of which to store the new version in, must be within the domain and catalog\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the identifier of the source version to copy from\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/data\\": {
      \\"get\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"getModel\\",
        \\"operationId\\": \\"getModelUsingGET_1\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/history\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'historisk'\\",
        \\"description\\": \\"changes the version state attribute to historic\\",
        \\"operationId\\": \\"setStateToHistoryUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/reject\\": {
      \\"put\\": {
        \\"tags\\": [\\"version-controller\\"],
        \\"summary\\": \\"set state to 'forkastet'\\",
        \\"description\\": \\"changes the version state attribute to rejected\\",
        \\"operationId\\": \\"setStateToRejectedUsingPUT\\",
        \\"consumes\\": [\\"application/json\\"],
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"catalog\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"catalog\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"domain\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"domain\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"model\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"model\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }, {
          \\"name\\": \\"version\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"version\\",
          \\"required\\": true,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/ModelVersion\\"
            }
          },
          \\"201\\": {
            \\"description\\": \\"Created\\"
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        },
        \\"security\\": [{
          \\"basicAuth\\": []
        }
        ]
      }
    },
    \\"/seres/v1/repository/versions/{versionReference}/changelog\\": {
      \\"get\\": {
        \\"tags\\": [\\"change-controller\\"],
        \\"summary\\": \\"version changelog\\",
        \\"description\\": \\"Returns the change events that has occured to a specific model-version. Pagination is required: ?page=0&size=20\\",
        \\"operationId\\": \\"listChangeEventsUsingGET\\",
        \\"produces\\": [\\"application/json;charset=UTF-8\\"],
        \\"parameters\\": [{
          \\"name\\": \\"versionReference\\",
          \\"in\\": \\"path\\",
          \\"description\\": \\"the version reference catalogId_domainId_modelId_versionId_versionNumber\\",
          \\"required\\": false,
          \\"type\\": \\"string\\"
        }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"OK\\",
            \\"schema\\": {
              \\"$ref\\": \\"#/definitions/VersionChangeEvent\\"
            }
          },
          \\"401\\": {
            \\"description\\": \\"Unauthorized\\"
          },
          \\"403\\": {
            \\"description\\": \\"Forbidden\\"
          },
          \\"404\\": {
            \\"description\\": \\"Not Found\\"
          }
        }
      }
    }
  },
  \\"definitions\\": {
    \\"Catalog\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"Catalog\\"
    },
    \\"Domain\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"state\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"Domain\\"
    },
    \\"Model\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"domainId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"state\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"type\\": {
          \\"type\\": \\"string\\"
        },
        \\"useFrom\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"useTo\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        }
      },
      \\"title\\": \\"Model\\"
    },
    \\"ModelData\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"manifest\\": {
          \\"type\\": \\"string\\"
        },
        \\"value\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"byte\\"
        }
      },
      \\"title\\": \\"ModelData\\"
    },
    \\"ModelImport\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"models\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"title\\": \\"ModelImport\\"
    },
    \\"ModelVersion\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"catalogId\\": {
          \\"type\\": \\"string\\"
        },
        \\"data\\": {
          \\"$ref\\": \\"#/definitions/ModelData\\"
        },
        \\"domainId\\": {
          \\"type\\": \\"string\\"
        },
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"imports\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/ModelImport\\"
          }
        },
        \\"lastChanged\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"modelId\\": {
          \\"type\\": \\"string\\"
        },
        \\"sourceVersion\\": {
          \\"type\\": \\"string\\"
        },
        \\"status\\": {
          \\"type\\": \\"string\\"
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"useFrom\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"useTo\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"user\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionInfo\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionNumber\\": {
          \\"type\\": \\"integer\\",
          \\"format\\": \\"int32\\"
        }
      },
      \\"title\\": \\"ModelVersion\\"
    },
    \\"VersionChangeEvent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"operation\\": {
          \\"type\\": \\"string\\"
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"userId\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionState\\": {
          \\"$ref\\": \\"#/definitions/ModelVersion\\"
        }
      },
      \\"title\\": \\"VersionChangeEvent\\"
    },
    \\"VersionChangeRecord\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"operation\\": {
          \\"type\\": \\"string\\"
        },
        \\"timestamp\\": {
          \\"type\\": \\"string\\",
          \\"format\\": \\"date-time\\"
        },
        \\"userId\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionReference\\": {
          \\"type\\": \\"string\\"
        },
        \\"versionState\\": {
          \\"$ref\\": \\"#/definitions/ModelVersion\\"
        }
      },
      \\"title\\": \\"VersionChangeRecord\\"
    }
  }
}
",
            "apiSpecUrl": "file:/Users/markko/dev/fdk/applications/api-cat/target/classes/seres-api.json",
            "contactPoint": Array [
              Object {
                "email": "seres@brreg.no",
                "organizationName": "SERES brukerstÃ¸tte",
                "uri": "http://www.brreg.no/",
              },
            ],
            "description": Object {
              "no": "Modellkatalogtjeneste for SERES - domeneklient",
            },
            "formats": Array [
              "application/json;charset=UTF-8",
            ],
            "id": "ecf33771-b392-4330-8bbd-0edd80ce95e5",
            "openApi": Object {
              "components": Object {
                "schemas": Object {
                  "Catalog": Object {
                    "properties": Object {
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "Catalog",
                    "type": "object",
                  },
                  "Domain": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "state": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "Domain",
                    "type": "object",
                  },
                  "Model": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "domainId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "state": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "type": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "useFrom": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "useTo": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                    },
                    "title": "Model",
                    "type": "object",
                  },
                  "ModelData": Object {
                    "properties": Object {
                      "manifest": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "value": Object {
                        "extensions": Object {},
                        "format": "byte",
                        "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                        "type": "string",
                      },
                    },
                    "title": "ModelData",
                    "type": "object",
                  },
                  "ModelImport": Object {
                    "properties": Object {
                      "models": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "ModelImport",
                    "type": "object",
                  },
                  "ModelVersion": Object {
                    "properties": Object {
                      "catalogId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "data": Object {
                        "$ref": "#/components/schemas/ModelData",
                        "extensions": Object {},
                      },
                      "domainId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "imports": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                      "lastChanged": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "modelId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "sourceVersion": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "status": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "useFrom": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "useTo": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "user": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionInfo": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionNumber": Object {
                        "extensions": Object {},
                        "format": "int32",
                        "type": "integer",
                      },
                    },
                    "title": "ModelVersion",
                    "type": "object",
                  },
                  "VersionChangeEvent": Object {
                    "properties": Object {
                      "operation": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "userId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionState": Object {
                        "$ref": "#/components/schemas/ModelVersion",
                        "extensions": Object {},
                      },
                    },
                    "title": "VersionChangeEvent",
                    "type": "object",
                  },
                  "VersionChangeRecord": Object {
                    "properties": Object {
                      "id": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "operation": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "timestamp": Object {
                        "extensions": Object {},
                        "format": "date-time",
                        "type": "string",
                      },
                      "userId": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionReference": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "versionState": Object {
                        "$ref": "#/components/schemas/ModelVersion",
                        "extensions": Object {},
                      },
                    },
                    "title": "VersionChangeRecord",
                    "type": "object",
                  },
                },
              },
              "info": Object {
                "contact": Object {
                  "email": "seres@brreg.no",
                  "name": "SERES brukerstÃ¸tte",
                  "url": "http://www.brreg.no/",
                },
                "description": "Modellkatalogtjeneste for SERES - domeneklient",
                "extensions": Object {},
                "license": Object {
                  "extensions": Object {},
                  "name": "License of API",
                  "url": "API license URL",
                },
                "termsOfService": "Terms of service",
                "title": "SERES3 REPOSITORY",
                "version": "1.0",
              },
              "openapi": "3.0.1",
              "paths": Object {
                "/seres/v1/repository/catalogs": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of all catalogs stored by the repository (currently restriced to 1000 catalogs)",
                    "extensions": Object {},
                    "operationId": "listCatalogUsingGET",
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list all catalogs",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created catalog",
                    "extensions": Object {},
                    "operationId": "createCatalogUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "unique identifier of the catalog, usually a 9-digit (orgnumber)",
                        "extensions": Object {},
                        "in": "query",
                        "name": "catalog",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the title of the catalog",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "create a catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the catalog",
                    "extensions": Object {},
                    "operationId": "getCatalogUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "the catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a specific catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                  "put": Object {
                    "description": "returns the updated catalog",
                    "extensions": Object {},
                    "operationId": "updateCatalogUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "the catalog's unique identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Catalog",
                          },
                        },
                      },
                      "description": "the catalog with updated values",
                      "required": false,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Catalog",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "update the catalog",
                    "tags": Array [
                      "catalog-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/domains": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of all domains under a specific catalog",
                    "extensions": Object {},
                    "operationId": "listDomainsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list domains",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created domain",
                    "extensions": Object {},
                    "operationId": "createDomainUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the title of the domain",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicauth": Array [],
                      },
                    ],
                    "summary": "create a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the domain object requested",
                    "extensions": Object {},
                    "operationId": "getDomainUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                  "put": Object {
                    "description": "Updates the domain object",
                    "extensions": Object {},
                    "operationId": "updateDomainUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier (base36)",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Domain",
                          },
                        },
                      },
                      "description": "the updated domain object",
                      "required": false,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Domain",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicauth": Array [],
                      },
                    ],
                    "summary": "update a domain",
                    "tags": Array [
                      "domain-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/models": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a the list of model objects in a domain",
                    "extensions": Object {},
                    "operationId": "listModelsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list models",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Returns the created model object",
                    "extensions": Object {},
                    "operationId": "createModelUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "title",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "type",
                        "extensions": Object {},
                        "in": "query",
                        "name": "type",
                        "schema": Object {
                          "default": "tjenestemodell",
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a model object",
                    "extensions": Object {},
                    "operationId": "getModelUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                  "put": Object {
                    "description": "Updated the values of the model object",
                    "extensions": Object {},
                    "operationId": "updateModelUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/Model",
                          },
                        },
                      },
                      "description": "updatedModel",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/Model",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "update a model",
                    "tags": Array [
                      "model-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/versions": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns a list of version objects",
                    "extensions": Object {},
                    "operationId": "listVersionsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "array",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "list versions",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "post": Object {
                    "description": "Create the model version from scratch",
                    "extensions": Object {},
                    "operationId": "createVersionUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "title",
                        "extensions": Object {},
                        "in": "query",
                        "name": "title",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/ModelData",
                          },
                        },
                      },
                      "description": "data",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}": Object {
                  "delete": Object {
                    "description": "deletes the refered version",
                    "extensions": Object {},
                    "operationId": "deleteVersionUsingDELETE",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "boolean",
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "204": Object {
                        "content": Object {},
                        "description": "No Content",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "delete a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "extensions": Object {},
                  "get": Object {
                    "description": "get a specific version object",
                    "extensions": Object {},
                    "operationId": "getVersionUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "get a version object",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                  "put": Object {
                    "description": "creates a new version object by copying it from another version",
                    "extensions": Object {},
                    "operationId": "updateVersionUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/ModelVersion",
                          },
                        },
                      },
                      "description": "updatedVersion",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "update a version",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/approve": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to approved",
                    "extensions": Object {},
                    "operationId": "setStateToApproveUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'publisert'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/copy": Object {
                  "extensions": Object {},
                  "post": Object {
                    "description": "creates a new version object by copying it from another version",
                    "extensions": Object {},
                    "operationId": "copyVersionUsingPOST",
                    "parameters": Array [
                      Object {
                        "description": "catalog identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain identifier",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the identifier of the model of which to store the new version in, must be within the domain and catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "the identifier of the source version to copy from",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "create a version by copy",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/data": Object {
                  "extensions": Object {},
                  "get": Object {
                    "extensions": Object {},
                    "operationId": "getModelUsingGET_1",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "getModel",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/history": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to historic",
                    "extensions": Object {},
                    "operationId": "setStateToHistoryUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'historisk'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/catalogs/{catalog}/{domain}/{model}/{version}/reject": Object {
                  "extensions": Object {},
                  "put": Object {
                    "description": "changes the version state attribute to rejected",
                    "extensions": Object {},
                    "operationId": "setStateToRejectedUsingPUT",
                    "parameters": Array [
                      Object {
                        "description": "catalog",
                        "extensions": Object {},
                        "in": "path",
                        "name": "catalog",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "domain",
                        "extensions": Object {},
                        "in": "path",
                        "name": "domain",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "model",
                        "extensions": Object {},
                        "in": "path",
                        "name": "model",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                      Object {
                        "description": "version",
                        "extensions": Object {},
                        "in": "path",
                        "name": "version",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/ModelVersion",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "201": Object {
                        "content": Object {},
                        "description": "Created",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "basicAuth": Array [],
                      },
                    ],
                    "summary": "set state to 'forkastet'",
                    "tags": Array [
                      "version-controller",
                    ],
                  },
                },
                "/seres/v1/repository/versions/{versionReference}/changelog": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Returns the change events that has occured to a specific model-version. Pagination is required: ?page=0&size=20",
                    "extensions": Object {},
                    "operationId": "listChangeEventsUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "the version reference catalogId_domainId_modelId_versionId_versionNumber",
                        "extensions": Object {},
                        "in": "path",
                        "name": "versionReference",
                        "required": true,
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/json;charset=UTF-8": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/VersionChangeEvent",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "OK",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {},
                        "description": "Unauthorized",
                        "extensions": Object {},
                      },
                      "403": Object {
                        "content": Object {},
                        "description": "Forbidden",
                        "extensions": Object {},
                      },
                      "404": Object {
                        "content": Object {},
                        "description": "Not Found",
                        "extensions": Object {},
                      },
                    },
                    "summary": "version changelog",
                    "tags": Array [
                      "change-controller",
                    ],
                  },
                },
              },
              "servers": Array [
                Object {
                  "url": "//repository-test-seres-ut1.paas-nprd.brreg.no/",
                },
              ],
              "tags": Array [
                Object {
                  "description": "Catalog Controller",
                  "extensions": Object {},
                  "name": "catalog-controller",
                },
                Object {
                  "description": "Change Controller",
                  "extensions": Object {},
                  "name": "change-controller",
                },
                Object {
                  "description": "Domain Controller",
                  "extensions": Object {},
                  "name": "domain-controller",
                },
                Object {
                  "description": "Model Controller",
                  "extensions": Object {},
                  "name": "model-controller",
                },
                Object {
                  "description": "Version Controller",
                  "extensions": Object {},
                  "name": "version-controller",
                },
              ],
            },
            "provenance": Object {
              "prefLabel": Object {
                "en": "Provinens",
                "no": "Opphav",
              },
              "uri": "http://data.brreg.no/datakatalog/provinens",
            },
            "publisher": Object {
              "id": "974760673",
              "name": "REGISTERENHETEN I BRÃNNÃYSUND",
              "orgPath": "/STAT/912660680/974760673",
              "prefLabel": Object {
                "no": "BrÃ¸nnÃ¸ysundregistrene",
              },
              "uri": "http://data.brreg.no/enhetsregisteret/enhet/974760673",
            },
            "title": Object {
              "no": "SERES3 REPOSITORY",
            },
          }
        }
        key="ecf33771-b392-4330-8bbd-0edd80ce95e5"
        publishers={Object {}}
      />
      <SearchHitItem
        fadeInCounter={2}
        item={
          Object {
            "apiDocUrl": "https://oidc-ver2.difi.no/kontaktinfo-oauth2-server/rest/swagger-ui.html",
            "apiSpec": "{\\"swagger\\":\\"2.0\\",\\"info\\":{\\"description\\":\\"Dette er eit REST-API for Ã¥ tilby funksjonalitet tilsvarende dagens SOAP-baserte oppslagstjeneste for KRR.\\\\n\\\\nTilgang til API-et styres med OAuth2-baserte access_tokens. Desse vert utstedt frÃ¥ ID-porten si OAuth2-teneste.\\\\n\\\\nLes meir pÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr_user.html\\\\n\\",\\"title\\":\\"REST-API for Kontakt- og reserversjonsregisteret (KRR)\\"},\\"host\\":\\"oidc-ver2.difi.no\\",\\"basePath\\":\\"/kontaktinfo-oauth2-server/rest\\",\\"tags\\":[{\\"name\\":\\"Person\\",\\"description\\":\\"Tilgang til data om innlogga brukar (brukaren knytt til access token).\\"},{\\"name\\":\\"Personer\\",\\"description\\":\\"Hent ut opptil 1000 personar frÃ¥ KRR pr. API-kall\\"}],\\"paths\\":{\\"/v1/person\\":{\\"get\\":{\\"tags\\":[\\"Person\\"],\\"summary\\":\\"Hent KRR-data for brukaren knytt til access token\\",\\"description\\":\\"Minimumskrav til scope: user/kontaktinformasjon.read, user/spraak.read eller user/spraak.write. For Ã¥ sjÃ¥ kva data som blir gjeve ut basert pÃ¥ ulike scope, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr_user.html#bruk-av-oauth2\\",\\"operationId\\":\\"retrievePersonUsingGET\\",\\"produces\\":[\\"application/json\\",\\"application/jose\\"],\\"parameters\\":[{\\"name\\":\\"Authorization\\",\\"in\\":\\"header\\",\\"description\\":\\"Authorization\\",\\"required\\":false,\\"type\\":\\"string\\"}],\\"responses\\":{\\"200\\":{\\"description\\":\\"Ok\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/PersonResource\\"}},\\"401\\":{\\"description\\":\\"Invalid authorization token provided\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"invalid_token\\\\\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\\\\\"...\\\\\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}},\\"403\\":{\\"description\\":\\"Forbidden, required scopes not associated with provided token\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"insufficient_scope\\\\\\" and may contain error_description=\\\\\\"...\\\\\\" and scope=\\\\\\"...\\\\\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}}},\\"security\\":[{\\"OAuth2\\":[]}]},\\"patch\\":{\\"tags\\":[\\"Person\\"],\\"summary\\":\\"Oppdater brukaren sin sprÃ¥kpreferanse\\",\\"description\\":\\"Krev scope user/spraak.write. Kun for Ã¥ endre sprÃ¥kpreferanse.\\",\\"operationId\\":\\"patchUserUsingPATCH\\",\\"consumes\\":[\\"application/json\\"],\\"produces\\":[\\"*/*\\"],\\"parameters\\":[{\\"name\\":\\"Authorization\\",\\"in\\":\\"header\\",\\"description\\":\\"Authorization\\",\\"required\\":false,\\"type\\":\\"string\\"},{\\"in\\":\\"body\\",\\"name\\":\\"userResourcePatch\\",\\"description\\":\\"userResourcePatch\\",\\"required\\":true,\\"schema\\":{\\"$ref\\":\\"#/definitions/person patch document\\"}}],\\"responses\\":{\\"204\\":{\\"description\\":\\"Query ok, no content in response\\",\\"schema\\":{\\"type\\":\\"object\\"}},\\"400\\":{\\"description\\":\\"Malformed patch document. Example: empty request body, if unrecognized properties exists in JSON request body, missing spraak-parameter, invalid person-identificator.\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"Header present in case of Oauth2-related errors. Will have multiple values, among them: error=\\\\\\"invalid_request\\\\\\" and may contain error_description=\\\\\\"...\\\\\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}},\\"401\\":{\\"description\\":\\"Invalid authorization token provided\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"invalid_token\\\\\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\\\\\"...\\\\\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}},\\"403\\":{\\"description\\":\\"Forbidden, required scopes not associated with provided token\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"insufficient_scope\\\\\\" and may contain error_description=\\\\\\"...\\\\\\" and scope=\\\\\\"...\\\\\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}},\\"415\\":{\\"description\\":\\"Unsupported patch document. Request has the wrong content type.\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"}},\\"422\\":{\\"description\\":\\"Unprocessable request. For example wrong value for preferredLanguage\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"}},\\"500\\":{\\"description\\":\\"Internal error.\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"}}},\\"security\\":[{\\"OAuth2\\":[]}]}},\\"/v1/personer\\":{\\"post\\":{\\"tags\\":[\\"Personer\\"],\\"summary\\":\\"Hent ut 1 til 1000 personar frÃ¥ KRR\\",\\"description\\":\\"Minimumskrav til scope: global/kontaktinformasjon.read, global/spraak.read eller global/spraak.write. For Ã¥ sjÃ¥ kva data som blir gjeve ut basert pÃ¥ ulike scope, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr.html#tilgjenglige-scopes\\",\\"operationId\\":\\"hentPersonerUsingPOST\\",\\"consumes\\":[\\"application/json\\"],\\"produces\\":[\\"application/json\\",\\"application/jose\\"],\\"parameters\\":[{\\"name\\":\\"present\\",\\"in\\":\\"query\\",\\"required\\":false,\\"type\\":\\"boolean\\"},{\\"in\\":\\"body\\",\\"name\\":\\"request\\",\\"description\\":\\"request\\",\\"required\\":true,\\"schema\\":{\\"$ref\\":\\"#/definitions/HentPersonerRequest\\"}}],\\"responses\\":{\\"200\\":{\\"description\\":\\"Ok\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/HentPersonerResponse\\"}},\\"401\\":{\\"description\\":\\"Invalid authorization token provided\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"invalid_token\\\\\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\\\\\"...\\\\\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}},\\"403\\":{\\"description\\":\\"Forbidden, required scopes not associated with provided token\\",\\"schema\\":{\\"$ref\\":\\"#/definitions/errors\\"},\\"headers\\":{\\"WWW-Authenticate\\":{\\"type\\":\\"string\\",\\"description\\":\\"error=\\\\\\"insufficient_scope\\\\\\" and may contain error_description=\\\\\\"...\\\\\\" and scope=\\\\\\"...\\\\\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9\\"}}}},\\"security\\":[{\\"OAuth2\\":[]}]}}},\\"securityDefinitions\\":{\\"OAuth2\\":{\\"type\\":\\"oauth2\\",\\"scopes\\":{\\"user/spraak.read\\":\\"Gir tilgang til innlogga brukar sin sprÃ¥kpreferanse\\",\\"user/spraak.write\\":\\"Gir tilgang til Ã¥ oppdatere innlogga brukar sin sprÃ¥kpreferanse\\",\\"global/spraak.read\\":\\"Gir tilgang til Ã¥ lese personar sin sprÃ¥kpreferanse\\",\\"user/kontaktinformasjon.read\\":\\"Gir tilgang til innlogga brukar si e-postadresse og mobilnummer + tidspunkt for sist oppdatering\\",\\"global/kontaktinformasjon.read\\":\\"Gir tilgang til personar sine e-postadresser og mobilnummer + tidspunkt for sist oppdatering\\",\\"user/varslingsstatus.read\\":\\"Gir tilgang til innlogga brukar sin status for om kontaktinfomasjonen kan brukast for varsling iht. eForvaltningsforskrifta sin Â§32\\",\\"global/varslingsstatus.read\\":\\"Gir tilgang til status for om kontaktinfomasjonen kan brukast for varsling iht. eForvaltningsforskrifta sin Â§32\\",\\"user/sikkerdigitalpost.read\\":\\"Gir tilgang til innlogga brukar si adresse for digital post til innbyggar\\",\\"global/sikkerdigitalpost.read\\":\\"Gir tilgang til adresse for digital post til innbyggar\\",\\"user/sertifikat.read\\":\\"Gir tilgang til innlogga bruker sitt krypteringssertifikat ved sending av digital post\\",\\"global/sertifikat.read\\":\\"Gir tilgang til personar sitt krypteringssertifikat ved sending av digital post\\"}}},\\"definitions\\":{\\"ContactInfoResource\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"epostadresse\\":{\\"type\\":\\"string\\"},\\"epostadresse_oppdatert\\":{\\"type\\":\\"string\\"},\\"epostadresse_sist_verifisert\\":{\\"type\\":\\"string\\"},\\"mobiltelefonnummer\\":{\\"type\\":\\"string\\"},\\"mobiltelefonnummer_oppdatert\\":{\\"type\\":\\"string\\"},\\"mobiltelefonnummer_sist_verifisert\\":{\\"type\\":\\"string\\"}},\\"title\\":\\"ContactInfoResource\\"},\\"DigitalPostResource\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"postkasseadresse\\":{\\"type\\":\\"string\\"},\\"postkasseleverandoeradresse\\":{\\"type\\":\\"string\\"}},\\"title\\":\\"DigitalPostResource\\"},\\"HentPersonerRequest\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"personidentifikatorer\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\"}}},\\"title\\":\\"HentPersonerRequest\\"},\\"HentPersonerResponse\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"personer\\":{\\"type\\":\\"array\\",\\"items\\":{\\"$ref\\":\\"#/definitions/PersonResource\\"}}},\\"title\\":\\"HentPersonerResponse\\"},\\"PersonResource\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"personidentifikator\\":{\\"type\\":\\"string\\"},\\"reservasjon\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"JA\\",\\"NEI\\"]},\\"status\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"AKTIV\\",\\"SLETTET\\",\\"IKKE_REGISTRERT\\"]},\\"varslingsstatus\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"KAN_IKKE_VARSLES\\",\\"KAN_VARSLES\\"]},\\"kontaktinformasjon\\":{\\"$ref\\":\\"#/definitions/ContactInfoResource\\"},\\"digital_post\\":{\\"$ref\\":\\"#/definitions/DigitalPostResource\\"},\\"sertifikat\\":{\\"type\\":\\"string\\"},\\"spraak\\":{\\"type\\":\\"string\\"},\\"spraak_oppdatert\\":{\\"type\\":\\"string\\"}},\\"title\\":\\"PersonResource\\",\\"description\\":\\"Kva felt ein fÃ¥r ut i responsen er avhengig av kva scope ein har, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr.html#tilgjenglige-scopes\\"},\\"error\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"status\\":{\\"type\\":\\"string\\",\\"example\\":422,\\"description\\":\\"HTTP status code\\"},\\"title\\":{\\"type\\":\\"string\\",\\"example\\":\\"Invalid value\\",\\"description\\":\\"a short, human-readable summary of the problem\\"},\\"detail\\":{\\"type\\":\\"string\\",\\"example\\":\\"See documentation for list of possible values.\\",\\"description\\":\\"a human-readable explanation specific to this occurrence of the problem\\"},\\"source\\":{\\"$ref\\":\\"#/definitions/source\\"},\\"links\\":{\\"$ref\\":\\"#/definitions/links\\"}},\\"title\\":\\"error\\",\\"description\\":\\"an error object according to JSON API specification.\\"},\\"errors\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"errors\\":{\\"type\\":\\"array\\",\\"items\\":{\\"$ref\\":\\"#/definitions/error\\"}}},\\"title\\":\\"errors\\",\\"description\\":\\"an error response conforming to JSON API spec.  http://jsonapi.org/format/#errors\\"},\\"links\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"about\\":{\\"type\\":\\"string\\",\\"example\\":\\"https://http.cat/422\\",\\"description\\":\\"Link to read more about the problem.\\"}},\\"title\\":\\"links\\"},\\"person patch document\\":{\\"type\\":\\"object\\",\\"required\\":[\\"spraak\\"],\\"properties\\":{\\"spraak\\":{\\"type\\":\\"string\\",\\"description\\":\\"ISO 639-1. Use empty string to delete user preference.\\",\\"enum\\":[\\"en\\",\\"se\\",\\"nb\\",\\"nn\\",\\"\\\\\\"\\\\\\"\\"]}},\\"title\\":\\"person patch document\\"},\\"source\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"pointer\\":{\\"type\\":\\"string\\",\\"example\\":\\"/spraak\\",\\"description\\":\\"JSON-pointer to relevant field in request-body.\\"}},\\"title\\":\\"source\\"}}}",
            "apiSpecUrl": "https://oidc-ver2.difi.no/kontaktinfo-oauth2-server/rest/apis",
            "datasetReferences": Array [
              Object {
                "referenceType": Object {
                  "code": "references",
                  "prefLabel": Object {
                    "en": "References",
                    "nb": "Refererer",
                    "nn": "Refererar",
                  },
                  "uri": "dct:references",
                },
                "source": Object {
                  "prefLabel": Object {
                    "nb": "Anleggsregisteret",
                  },
                  "uri": "https://data.norge.no/node/78",
                },
              },
            ],
            "description": Object {
              "no": "Dette er eit REST-API for Ã¥ tilby funksjonalitet tilsvarende dagens SOAP-baserte oppslagstjeneste for KRR.

Tilgang til API-et styres med OAuth2-baserte access_tokens. Desse vert utstedt frÃ¥ ID-porten si OAuth2-teneste.

Les meir pÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr_user.html
",
            },
            "formats": Array [
              "application/json",
              "application/jose",
              "*/*",
            ],
            "id": "05b3e72e-4579-4b64-a7b7-a80a9b2af85c",
            "openApi": Object {
              "components": Object {
                "schemas": Object {
                  "ContactInfoResource": Object {
                    "properties": Object {
                      "epostadresse": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "epostadresse_oppdatert": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "epostadresse_sist_verifisert": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "mobiltelefonnummer": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "mobiltelefonnummer_oppdatert": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "mobiltelefonnummer_sist_verifisert": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "ContactInfoResource",
                    "type": "object",
                  },
                  "DigitalPostResource": Object {
                    "properties": Object {
                      "postkasseadresse": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "postkasseleverandoeradresse": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "DigitalPostResource",
                    "type": "object",
                  },
                  "HentPersonerRequest": Object {
                    "properties": Object {
                      "personidentifikatorer": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                    },
                    "title": "HentPersonerRequest",
                    "type": "object",
                  },
                  "HentPersonerResponse": Object {
                    "properties": Object {
                      "personer": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                    },
                    "title": "HentPersonerResponse",
                    "type": "object",
                  },
                  "PersonResource": Object {
                    "description": "Kva felt ein fÃ¥r ut i responsen er avhengig av kva scope ein har, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr.html#tilgjenglige-scopes",
                    "properties": Object {
                      "digital_post": Object {
                        "$ref": "#/components/schemas/DigitalPostResource",
                        "extensions": Object {},
                      },
                      "kontaktinformasjon": Object {
                        "$ref": "#/components/schemas/ContactInfoResource",
                        "extensions": Object {},
                      },
                      "personidentifikator": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "reservasjon": Object {
                        "enum": Array [
                          "JA",
                          "NEI",
                        ],
                        "extensions": Object {},
                        "type": "string",
                      },
                      "sertifikat": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "spraak": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "spraak_oppdatert": Object {
                        "extensions": Object {},
                        "type": "string",
                      },
                      "status": Object {
                        "enum": Array [
                          "AKTIV",
                          "SLETTET",
                          "IKKE_REGISTRERT",
                        ],
                        "extensions": Object {},
                        "type": "string",
                      },
                      "varslingsstatus": Object {
                        "enum": Array [
                          "KAN_IKKE_VARSLES",
                          "KAN_VARSLES",
                        ],
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "PersonResource",
                    "type": "object",
                  },
                  "error": Object {
                    "description": "an error object according to JSON API specification.",
                    "properties": Object {
                      "detail": Object {
                        "description": "a human-readable explanation specific to this occurrence of the problem",
                        "example": "See documentation for list of possible values.",
                        "extensions": Object {},
                        "type": "string",
                      },
                      "links": Object {
                        "$ref": "#/components/schemas/links",
                        "extensions": Object {},
                      },
                      "source": Object {
                        "$ref": "#/components/schemas/source",
                        "extensions": Object {},
                      },
                      "status": Object {
                        "description": "HTTP status code",
                        "example": "422",
                        "extensions": Object {},
                        "type": "string",
                      },
                      "title": Object {
                        "description": "a short, human-readable summary of the problem",
                        "example": "Invalid value",
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "error",
                    "type": "object",
                  },
                  "errors": Object {
                    "description": "an error response conforming to JSON API spec.  http://jsonapi.org/format/#errors",
                    "properties": Object {
                      "errors": Object {
                        "extensions": Object {},
                        "type": "array",
                      },
                    },
                    "title": "errors",
                    "type": "object",
                  },
                  "links": Object {
                    "properties": Object {
                      "about": Object {
                        "description": "Link to read more about the problem.",
                        "example": "https://http.cat/422",
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "links",
                    "type": "object",
                  },
                  "person patch document": Object {
                    "properties": Object {
                      "spraak": Object {
                        "description": "ISO 639-1. Use empty string to delete user preference.",
                        "enum": Array [
                          "en",
                          "se",
                          "nb",
                          "nn",
                          "\\"\\"",
                        ],
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "required": Array [
                      "spraak",
                    ],
                    "title": "person patch document",
                    "type": "object",
                  },
                  "source": Object {
                    "properties": Object {
                      "pointer": Object {
                        "description": "JSON-pointer to relevant field in request-body.",
                        "example": "/spraak",
                        "extensions": Object {},
                        "type": "string",
                      },
                    },
                    "title": "source",
                    "type": "object",
                  },
                },
                "securitySchemes": Object {
                  "OAuth2": Object {
                    "extensions": Object {},
                    "flows": Object {},
                    "type": "OAUTH2",
                  },
                },
              },
              "info": Object {
                "description": "Dette er eit REST-API for Ã¥ tilby funksjonalitet tilsvarende dagens SOAP-baserte oppslagstjeneste for KRR.

Tilgang til API-et styres med OAuth2-baserte access_tokens. Desse vert utstedt frÃ¥ ID-porten si OAuth2-teneste.

Les meir pÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr_user.html
",
                "extensions": Object {},
                "title": "REST-API for Kontakt- og reserversjonsregisteret (KRR)",
              },
              "openapi": "3.0.1",
              "paths": Object {
                "/v1/person": Object {
                  "extensions": Object {},
                  "get": Object {
                    "description": "Minimumskrav til scope: user/kontaktinformasjon.read, user/spraak.read eller user/spraak.write. For Ã¥ sjÃ¥ kva data som blir gjeve ut basert pÃ¥ ulike scope, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr_user.html#bruk-av-oauth2",
                    "extensions": Object {},
                    "operationId": "retrievePersonUsingGET",
                    "parameters": Array [
                      Object {
                        "description": "Authorization",
                        "extensions": Object {},
                        "in": "header",
                        "name": "Authorization",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/PersonResource",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/PersonResource",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Ok",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Invalid authorization token provided",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"invalid_token\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\"...\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                      "403": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Forbidden, required scopes not associated with provided token",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"insufficient_scope\\" and may contain error_description=\\"...\\" and scope=\\"...\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                    },
                    "security": Array [
                      Object {
                        "OAuth2": Array [],
                      },
                    ],
                    "summary": "Hent KRR-data for brukaren knytt til access token",
                    "tags": Array [
                      "Person",
                    ],
                  },
                  "patch": Object {
                    "description": "Krev scope user/spraak.write. Kun for Ã¥ endre sprÃ¥kpreferanse.",
                    "extensions": Object {},
                    "operationId": "patchUserUsingPATCH",
                    "parameters": Array [
                      Object {
                        "description": "Authorization",
                        "extensions": Object {},
                        "in": "header",
                        "name": "Authorization",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/person patch document",
                          },
                        },
                      },
                      "description": "userResourcePatch",
                      "required": true,
                    },
                    "responses": Object {
                      "204": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "extensions": Object {},
                              "type": "object",
                            },
                          },
                        },
                        "description": "Query ok, no content in response",
                        "extensions": Object {},
                      },
                      "400": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Malformed patch document. Example: empty request body, if unrecognized properties exists in JSON request body, missing spraak-parameter, invalid person-identificator.",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "Header present in case of Oauth2-related errors. Will have multiple values, among them: error=\\"invalid_request\\" and may contain error_description=\\"...\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                      "401": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Invalid authorization token provided",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"invalid_token\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\"...\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                      "403": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Forbidden, required scopes not associated with provided token",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"insufficient_scope\\" and may contain error_description=\\"...\\" and scope=\\"...\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                      "415": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Unsupported patch document. Request has the wrong content type.",
                        "extensions": Object {},
                      },
                      "422": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Unprocessable request. For example wrong value for preferredLanguage",
                        "extensions": Object {},
                      },
                      "500": Object {
                        "content": Object {
                          "*/*": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Internal error.",
                        "extensions": Object {},
                      },
                    },
                    "security": Array [
                      Object {
                        "OAuth2": Array [],
                      },
                    ],
                    "summary": "Oppdater brukaren sin sprÃ¥kpreferanse",
                    "tags": Array [
                      "Person",
                    ],
                  },
                },
                "/v1/personer": Object {
                  "extensions": Object {},
                  "post": Object {
                    "description": "Minimumskrav til scope: global/kontaktinformasjon.read, global/spraak.read eller global/spraak.write. For Ã¥ sjÃ¥ kva data som blir gjeve ut basert pÃ¥ ulike scope, sjÃ¥ https://difi.github.io/idporten-oidc-dokumentasjon/oidc_api_krr.html#tilgjenglige-scopes",
                    "extensions": Object {},
                    "operationId": "hentPersonerUsingPOST",
                    "parameters": Array [
                      Object {
                        "extensions": Object {},
                        "in": "query",
                        "name": "present",
                        "schema": Object {
                          "extensions": Object {},
                          "type": "boolean",
                        },
                      },
                    ],
                    "requestBody": Object {
                      "content": Object {
                        "application/json": Object {
                          "schema": Object {
                            "$ref": "#/components/schemas/HentPersonerRequest",
                          },
                        },
                      },
                      "description": "request",
                      "required": true,
                    },
                    "responses": Object {
                      "200": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/HentPersonerResponse",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/HentPersonerResponse",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Ok",
                        "extensions": Object {},
                      },
                      "401": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Invalid authorization token provided",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"invalid_token\\" (not present if authorization header is missing or has the wrong type) and may contain error_description=\\"...\\" with further details. OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                      "403": Object {
                        "content": Object {
                          "application/jose": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                          "application/json": Object {
                            "schema": Object {
                              "$ref": "#/components/schemas/errors",
                              "extensions": Object {},
                            },
                          },
                        },
                        "description": "Forbidden, required scopes not associated with provided token",
                        "extensions": Object {},
                        "headers": Object {
                          "WWW-Authenticate": Object {
                            "description": "error=\\"insufficient_scope\\" and may contain error_description=\\"...\\" and scope=\\"...\\". OAuth2-related errors - see https://tools.ietf.org/html/rfc6750#page-9",
                            "schema": Object {
                              "extensions": Object {},
                              "type": "string",
                            },
                          },
                        },
                      },
                    },
                    "security": Array [
                      Object {
                        "OAuth2": Array [],
                      },
                    ],
                    "summary": "Hent ut 1 til 1000 personar frÃ¥ KRR",
                    "tags": Array [
                      "Personer",
                    ],
                  },
                },
              },
              "servers": Array [
                Object {
                  "url": "//oidc-ver2.difi.no/kontaktinfo-oauth2-server/rest",
                },
              ],
              "tags": Array [
                Object {
                  "description": "Tilgang til data om innlogga brukar (brukaren knytt til access token).",
                  "extensions": Object {},
                  "name": "Person",
                },
                Object {
                  "description": "Hent ut opptil 1000 personar frÃ¥ KRR pr. API-kall",
                  "extensions": Object {},
                  "name": "Personer",
                },
              ],
            },
            "publisher": Object {
              "id": "974760673",
              "name": "REGISTERENHETEN I BRÃNNÃYSUND",
              "orgPath": "/STAT/912660680/974760673",
              "prefLabel": Object {
                "no": "BrÃ¸nnÃ¸ysundregistrene",
              },
              "uri": "http://data.brreg.no/enhetsregisteret/enhet/974760673",
            },
            "title": Object {
              "no": "REST-API for Kontakt- og reserversjonsregisteret (KRR)",
            },
          }
        }
        key="05b3e72e-4579-4b64-a7b7-a80a9b2af85c"
        publishers={Object {}}
      />
    </div>
  </div>
</main>
`;

exports[`should render ResultsApi correctly with minimum of props and no hits 1`] = `
<main
  id="content"
>
  <div
    className="row mb-3"
  >
    <div
      className="col-12 d-flex justify-content-between"
    >
      <button
        className="btn btn-primary fdk-button fade-in-500 d-none"
        onClick={null}
        type="button"
      >
        Clear
      </button>
      <Select
        activeSort={null}
        items={
          Array [
            Object {
              "defaultOption": true,
              "field": "_score",
              "label": "relevance",
              "order": "asc",
            },
            Object {
              "field": "title",
              "label": "title",
              "order": "asc",
            },
            Object {
              "field": "modified",
              "label": "modified",
              "order": "desc",
            },
            Object {
              "field": "publisher.name",
              "label": "publisher",
              "order": "asc",
            },
          ]
        }
        onChange={[MockFunction]}
      />
    </div>
  </div>
  <div
    className="row"
  >
    <aside
      className="search-filters col-lg-4 d-none d-lg-block"
    >
      <span
        aria-hidden="false"
        className="uu-invisible"
      >
        Filtrering
      </span>
    </aside>
    <div
      className="col-12 col-lg-8"
      id="apis"
    />
  </div>
</main>
`;
